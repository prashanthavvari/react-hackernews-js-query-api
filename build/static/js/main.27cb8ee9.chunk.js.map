{"version":3,"sources":["JavaScript.js","Python.js","App.js","serviceWorker.js","index.js"],"names":["JavaScript","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","api","results","topTen","nextPage","bind","assertThisInitialized","url","fetch","result","json","nbPage","nbPages","currentPage","page","fetchApi","setState","hits","react_default","a","createElement","className","map","item","key","href","target","rel","title","author","onClick","Component","Python","App","loadJavaScript","renderedComponent","component","includes","src_JavaScript","src_Python","loadJava","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27cb8ee9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass JavaScript extends Component {\n  constructor() {\n    super();\n    this.state = {\n      api: 'http://hn.algolia.com/api/v1/search?query=javascript&tags=story',\n      results: [],\n      topTen: []\n    }\n    this.nextPage= this.nextPage.bind(this);\n  }\n  async fetchApi(url) {\n    let result = await fetch(url);\n    let json = await result.json();\n    return json;\n  }\n  async nextPage() {\n    let nbPage = this.state.results.nbPages || 0;\n    let currentPage = this.state.results.page + 1;\n    if (currentPage < nbPage) {\n      let result = await this.fetchApi(this.state.api+'&page='+currentPage);\n      this.setState({results: result});\n    }\n  }\n  async componentWillMount() {\n    let result = await this.fetchApi(this.state.api);\n    this.setState({results: result});\n  }\n\n  render() {\n    let results = this.state.results;\n    let hits = results.hits;\n    if (hits) {\n      return (\n        <div className=\"App\">\n          <h2>{hits.map((item) => (<span className=\"list\" key={item.url}><a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">{item.title}</a><br/>-By {item.author}</span>))}</h2>\n          <button onClick={this.nextPage.bind(this)}>Next>></button>\n        </div>\n      );\n    } else {\n      return (<div className=\"App\">Loading Please Wait</div>);\n    }\n  }\n}\nexport default JavaScript;\n","import React, { Component } from 'react';\n\nclass Python extends Component {\n  constructor() {\n    super();\n    this.state = {\n      api: 'http://hn.algolia.com/api/v1/search?query=python&tags=story',\n      results: [],\n      topTen: []\n    }\n    this.nextPage= this.nextPage.bind(this);\n  }\n  async fetchApi(url) {\n    let result = await fetch(url);\n    let json = await result.json();\n    return json;\n  }\n  async nextPage() {\n    let nbPage = this.state.results.nbPages || 0;\n    let currentPage = this.state.results.page + 1;\n    if (currentPage < nbPage) {\n      let result = await this.fetchApi(this.state.api+'&page='+currentPage);\n      this.setState({results: result});\n    }\n  }\n  async componentWillMount() {\n    let result = await this.fetchApi(this.state.api);\n    this.setState({results: result});\n  }\n\n  render() {\n    let results = this.state.results;\n    let hits = results.hits;\n    if (hits) {\n      return (\n        <div className=\"App\">\n          <h2>{hits.map((item) => (<span className=\"list\" key={item.url}><a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">{item.title}</a><br/>-By {item.author}</span>))}</h2>\n          <button onClick={this.nextPage.bind(this)}>Next>></button>\n        </div>\n      );\n    } else {\n      return (<div className=\"App\">Loading Please Wait</div>);\n    }\n  }\n}\nexport default Python;\n","import React, { Component } from 'react';\nimport JavaScript from './JavaScript';\nimport Python from './Python';\n// import logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentPage: 'JavaScript'\n    }\n  }\n  componentWillMount() {\n    this.loadJavaScript.bind(this);\n  }\n  loadJavaScript() {\n    this.setState({currentPage: 'JavaScript'});\n  }\n  loadJava() {\n    this.setState({currentPage: 'Python'});\n  }\n\n  render() {\n    let component = this.state.currentPage;\n    let renderedComponent;\n    if (component.includes('JavaScript')) {\n      renderedComponent = <JavaScript/>;\n    } else if(component.includes('Python')){\n      renderedComponent = <Python/>;\n    }\n    return (\n      <div>\n        <div className=\"header\">\n          <button className=\"btn\" onClick={this.loadJavaScript.bind(this)}>JavaScript</button>\n          <button className=\"btn\" onClick={this.loadJava.bind(this)}>Python</button>\n        </div>\n        {renderedComponent}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}